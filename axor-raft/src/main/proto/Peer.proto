syntax = "proto3";

option java_package = "io.axor.raft.proto";
option java_outer_classname = "PeerProto";

package axor.raft;

import "axor/axor.proto";

message PeerMessage {
  oneof msg {
    ClientSeekForLeader clientSeekForLeader = 1;
    ClientTxnReq clientTxnReq = 2;
    ClientQueryReq clientQueryReq = 3;
    LogAppend logAppend = 12;
    LogAppendAck logAppendAck = 13;
    LeaderHeartbeat leaderHeartbeat = 14;
    LogFetch logFetch = 15;
    LogFetchRes logFetchRes = 16;
    RequestVote requestVote = 17;
    RequestVoteAck requestVoteAck = 18;
  }
}

message MediatorMessage {
  int64 seqId = 1;
  oneof msg {
    TxnReq txnReq = 11;
    QueryReq queryReq = 12;
    FailureRes failureRes = 21;
    TxnRes txnRes = 22;
    QueryRes queryRes = 23;
    Redirect redirect = 31;
    NoLeader noLeader = 32;
  }

  message TxnReq {
    bytes data = 1;
  }

  message QueryReq {
    bytes data = 2;
  }

  message FailureRes {
    Status status = 1;
    string message = 2;
  }

  message TxnRes {
    int64 term = 1;
    LogId commitedId = 2;
  }

  message QueryRes {
    int64 term = 1;
    bytes data = 2;
  }

  message Redirect {
    int64 term = 1;
    axor.ActorAddress peer = 2;
  }

  message NoLeader {
    int64 term = 1;
  }

  enum Status {
    NONE = 0;
    SUCCESS = 1;
    SYS_ERROR = 4;
    APPEND_TIMEOUT = 5;
    APPEND_FAILURE = 6;
    COMMIT_FAILURE = 7;
    CANCELED = 8;
  }
}

message MsgId {
  int64 seqId = 1;
  int64 clientId = 2;
}

enum ControlFlag {
  NONE = 0;
  IGNORE = 1;
}

message ClientSeekForLeader {
  int64 seqId = 1;
}

message ClientTxnReq {
  int64 seqId = 1;
  int64 clientId = 2;
  bytes data = 3;
  repeated int64 ackedSeqId = 4;
  ControlFlag controlFlag = 5;
}

message ClientQueryReq {
  int64 seqId = 1;
  int64 clientId = 2;
  LogId logId = 3;
  bytes data = 4;
}

message ClientQueryRes {
  int64 seqId = 1;
  bytes data = 2;
}

message LogId {
  int64 index = 1;
  int64 term = 2;
}

message LogValue {
  bytes data = 1;
  int64 seqId = 2;
  int64 clientId = 3;
  int64 timestamp = 4;
  repeated int64 ackedSeqId = 5;
  ControlFlag controlFlag = 6;
}

message LogEntry {
  LogId id = 1;
  LogValue value = 2;
}

message AppendResult {
  Status status = 1;
  LogId commited = 2;
  repeated LogId uncommited = 3;

  enum Status {
    NONE = 0;
    SUCCESS = 1;
    NO_ACTION = 2;
    TERM_DENY = 3;
    SYSTEM_ERROR = 4;
    TERM_EXPIRED = 5;
    INDEX_EXPIRED = 6;
    INDEX_EXCEEDED = 7;
    PREV_ID_NOT_MATCH = 8;
  }
}

message CommitResult {
  Status status = 1;
  LogId commited = 2;
  repeated LogId uncommited = 3;

  enum Status {
    NONE = 0;
    SUCCESS = 1;
    NO_ACTION = 2;
    NO_VALUE = 3;
    SYSTEM_ERROR = 4;
    NOT_ENOUGH_DATA = 5;
    ILLEGAL_STATE = 6;
    INDEX_EXCEEDED = 7;
  }
}

message LogAppend {
  int64 txnId = 1;
  int64 term = 2;
  repeated LogEntry entries = 3;
  LogId prevLogId = 4;
  LogId leaderCommited = 5;
}

message LogAppendAck {
  int64 txnId = 1;
  int64 term = 2;
  AppendResult result = 3;
}

message LeaderHeartbeat {
  int64 term = 2;
  LogId leaderCommited = 4;
}

message LogFetch {
  int64 txnId = 1;
  LogId startAt = 2;
  bool includeStartAt = 3;
  int32 limit = 4;
}

message LogFetchRes {
  int64 txnId = 1;
  bool success = 2;
  repeated LogEntry entries = 3;
  string errMsg = 4;
  LogId leaderCommited = 5;
}

message RequestVote {
  int64 txnId = 1;
  int64 term = 2;
  LogId logEndId = 3;
}

message RequestVoteAck {
  int64 txnId = 1;
  int64 term = 2;
  bool voteGranted = 3;
}

message Snapshot {
  int64 id = 1;
  bytes data = 2;
  repeated string files = 3;
  LogId logId = 4;
  repeated UnfinishedTxn unfinishedTxn = 5;

  message UnfinishedTxn {
    int64 seqId = 1;
    int64 clientId = 2;
    int64 createTime = 3;
    LogId appliedLogId = 5;
    repeated int64 ackedSeqId = 6;
  }
}

message SnapshotResult {
  Snapshot snapshot = 1;
  bool success = 2;
  string reason = 3;
}

message InstallSnapshot {
  Snapshot snapshot = 1;
  LogId commitedLogId = 2;
  axor.ActorAddress fileServerAddress = 3;
}

message InstallSnapshotAck {
  bool success = 1;
  string cause = 2;
}
